apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libs
def libsVersions = rootProject.ext.libraries

def BASE_API_URL = "API_URL"

android {
    compileSdkVersion cfg.compileSdkVersion

    defaultConfig {
        applicationId cfg.applicationId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName "${cfg.version_versionMajor}.${cfg.version_versionMinor}.${cfg.version_versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationIdSuffix ".debug"
            versionNameSuffix "_DEBUG"
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            buildConfigField "String", BASE_API_URL, project.property('BASE_API_URL_PRODUCTION')
        }
        develop {
            buildConfigField "String", BASE_API_URL, project.property('BASE_API_URL_DEVELOP')
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':data')

    //Kotlin
    implementation libs.kotlin

    //Appcompat
    implementation "androidx.appcompat:appcompat:${libsVersions.androidx}"
    implementation "androidx.core:core-ktx:${libsVersions.androidx}"
    implementation "androidx.recyclerview:recyclerview:${libsVersions.recycler}"

    //Constraint Layout
    implementation "com.android.support.constraint:constraint-layout:${libsVersions.constraint}"

    //Dagger 2
    implementation "com.google.dagger:dagger:${libsVersions.dagger}"
    implementation "com.google.dagger:dagger-android:${libsVersions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libsVersions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libsVersions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${libsVersions.dagger}"

    //LifeCycles
    implementation "android.arch.lifecycle:extensions:${libsVersions.lifecycles}"
    implementation "android.arch.lifecycle:reactivestreams:${libsVersions.lifecycles}"

    //RX
    implementation libs.rxAndroid
    implementation libs.rxKotlin

    //Picasso
    implementation "com.squareup.picasso:picasso:${libsVersions.picasso}"

    //Testing
    testImplementation libs.junit
    androidTestImplementation libs.testrunner
    androidTestImplementation libs.espresso
}
