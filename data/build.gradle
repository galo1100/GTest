apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libs
def libsVersions = rootProject.ext.libraries

def API_TOKEN = "API_TOKEN"
def BASE_IMAGE = "BASE_IMAGE"

android {
    compileSdkVersion cfg.compileSdkVersion

    defaultConfig {
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            buildConfigField "String", API_TOKEN, getMovieDBToken()
            buildConfigField "String", BASE_IMAGE, project.property('BASE_IMAGE_URL_PRODUCTION')
        }
        develop {
            buildConfigField "String", API_TOKEN, getMovieDBToken()
            buildConfigField "String", BASE_IMAGE, project.property('BASE_IMAGE_URL_DEVELOP')
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')

    //Kotlin
    implementation libs.kotlin

    //RX
    implementation libs.rxKotlin

    //Dagger 2
    implementation "com.google.dagger:dagger:${libsVersions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libsVersions.dagger}"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:${libsVersions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libsVersions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libsVersions.retrofit}"

    //Okhttp
    implementation "com.squareup.okhttp:okhttp:${libsVersions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libsVersions.interceptor}"

    //Testing

    testImplementation "com.squareup.okhttp3:mockwebserver:${libsVersions.mockwebServer}"

    testImplementation libs.junit
    testImplementation libs.mockito
    androidTestImplementation libs.testrunner
    androidTestImplementation libs.espresso
}

def getMovieDBToken() {
    def localPropertiesFile = rootProject.file("moviedb.properties")
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(localPropertiesFile))

    def accessToken = localProperties.getProperty("moviedb.token", null)
    if (accessToken == null) {
        throw new GradleException(
                "Please add your moviedb.properties file with the TheMovieDB ApiToken defined")
    }
    return accessToken
}